// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/interfaces/rpcnode/rpcnode.proto

/*
Package rpcnode is a generated protocol buffer package.

It is generated from these files:
	src/interfaces/rpcnode/rpcnode.proto

It has these top-level messages:
	RpcNodeRequest
	RpcNodeResponse
*/
package rpcnode

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RpcNodeRequest struct {
	ApiKey          string                     `protobuf:"bytes,1,opt,name=api_key,json=apiKey" json:"api_key,omitempty"`
	Uid             string                     `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
	Licences        int32                      `protobuf:"varint,3,opt,name=licences" json:"licences,omitempty"`
	StartLicences   string                     `protobuf:"bytes,4,opt,name=start_licences,json=startLicences" json:"start_licences,omitempty"`
	StopLicences    string                     `protobuf:"bytes,5,opt,name=stop_licences,json=stopLicences" json:"stop_licences,omitempty"`
	Version         string                     `protobuf:"bytes,6,opt,name=version" json:"version,omitempty"`
	Libraries       *RpcNodeRequest_Library    `protobuf:"bytes,7,opt,name=libraries" json:"libraries,omitempty"`
	Lang            map[string]string          `protobuf:"bytes,8,rep,name=lang" json:"lang,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LibrariesFields []*RpcNodeRequest_LibField `protobuf:"bytes,9,rep,name=libraries_fields,json=librariesFields" json:"libraries_fields,omitempty"`
}

func (m *RpcNodeRequest) Reset()                    { *m = RpcNodeRequest{} }
func (m *RpcNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*RpcNodeRequest) ProtoMessage()               {}
func (*RpcNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RpcNodeRequest) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *RpcNodeRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *RpcNodeRequest) GetLicences() int32 {
	if m != nil {
		return m.Licences
	}
	return 0
}

func (m *RpcNodeRequest) GetStartLicences() string {
	if m != nil {
		return m.StartLicences
	}
	return ""
}

func (m *RpcNodeRequest) GetStopLicences() string {
	if m != nil {
		return m.StopLicences
	}
	return ""
}

func (m *RpcNodeRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RpcNodeRequest) GetLibraries() *RpcNodeRequest_Library {
	if m != nil {
		return m.Libraries
	}
	return nil
}

func (m *RpcNodeRequest) GetLang() map[string]string {
	if m != nil {
		return m.Lang
	}
	return nil
}

func (m *RpcNodeRequest) GetLibrariesFields() []*RpcNodeRequest_LibField {
	if m != nil {
		return m.LibrariesFields
	}
	return nil
}

type RpcNodeRequest_Library struct {
	Ident   string `protobuf:"bytes,1,opt,name=ident" json:"ident,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *RpcNodeRequest_Library) Reset()                    { *m = RpcNodeRequest_Library{} }
func (m *RpcNodeRequest_Library) String() string            { return proto.CompactTextString(m) }
func (*RpcNodeRequest_Library) ProtoMessage()               {}
func (*RpcNodeRequest_Library) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *RpcNodeRequest_Library) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

func (m *RpcNodeRequest_Library) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type RpcNodeRequest_LibField struct {
	TypeField    string `protobuf:"bytes,1,opt,name=type_field,json=typeField" json:"type_field,omitempty"`
	MaxSize      int32  `protobuf:"varint,2,opt,name=max_size,json=maxSize" json:"max_size,omitempty"`
	MinSize      int32  `protobuf:"varint,3,opt,name=min_size,json=minSize" json:"min_size,omitempty"`
	DefaultValue string `protobuf:"bytes,4,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	Patern       string `protobuf:"bytes,5,opt,name=patern" json:"patern,omitempty"`
}

func (m *RpcNodeRequest_LibField) Reset()                    { *m = RpcNodeRequest_LibField{} }
func (m *RpcNodeRequest_LibField) String() string            { return proto.CompactTextString(m) }
func (*RpcNodeRequest_LibField) ProtoMessage()               {}
func (*RpcNodeRequest_LibField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *RpcNodeRequest_LibField) GetTypeField() string {
	if m != nil {
		return m.TypeField
	}
	return ""
}

func (m *RpcNodeRequest_LibField) GetMaxSize() int32 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

func (m *RpcNodeRequest_LibField) GetMinSize() int32 {
	if m != nil {
		return m.MinSize
	}
	return 0
}

func (m *RpcNodeRequest_LibField) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

func (m *RpcNodeRequest_LibField) GetPatern() string {
	if m != nil {
		return m.Patern
	}
	return ""
}

type RpcNodeResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *RpcNodeResponse) Reset()                    { *m = RpcNodeResponse{} }
func (m *RpcNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*RpcNodeResponse) ProtoMessage()               {}
func (*RpcNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RpcNodeResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*RpcNodeRequest)(nil), "rpcnode.RpcNodeRequest")
	proto.RegisterType((*RpcNodeRequest_Library)(nil), "rpcnode.RpcNodeRequest.Library")
	proto.RegisterType((*RpcNodeRequest_LibField)(nil), "rpcnode.RpcNodeRequest.LibField")
	proto.RegisterType((*RpcNodeResponse)(nil), "rpcnode.RpcNodeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RpcNode service

type RpcNodeClient interface {
	// Sends a greeting
	Sync(ctx context.Context, in *RpcNodeRequest, opts ...grpc.CallOption) (*RpcNodeResponse, error)
}

type rpcNodeClient struct {
	cc *grpc.ClientConn
}

func NewRpcNodeClient(cc *grpc.ClientConn) RpcNodeClient {
	return &rpcNodeClient{cc}
}

func (c *rpcNodeClient) Sync(ctx context.Context, in *RpcNodeRequest, opts ...grpc.CallOption) (*RpcNodeResponse, error) {
	out := new(RpcNodeResponse)
	err := grpc.Invoke(ctx, "/rpcnode.RpcNode/Sync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcNode service

type RpcNodeServer interface {
	// Sends a greeting
	Sync(context.Context, *RpcNodeRequest) (*RpcNodeResponse, error)
}

func RegisterRpcNodeServer(s *grpc.Server, srv RpcNodeServer) {
	s.RegisterService(&_RpcNode_serviceDesc, srv)
}

func _RpcNode_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcNodeServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcnode.RpcNode/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcNodeServer).Sync(ctx, req.(*RpcNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcnode.RpcNode",
	HandlerType: (*RpcNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _RpcNode_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/interfaces/rpcnode/rpcnode.proto",
}

func init() { proto.RegisterFile("src/interfaces/rpcnode/rpcnode.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x25, 0x6d, 0xd3, 0x34, 0x77, 0xeb, 0x36, 0x59, 0x88, 0x99, 0x48, 0x88, 0xd0, 0x81, 0x54,
	0x5e, 0x3a, 0xa9, 0x08, 0xf1, 0x25, 0x1e, 0xd9, 0xcb, 0x26, 0x1e, 0x32, 0x89, 0xd7, 0xc8, 0x4b,
	0x6e, 0x27, 0x8b, 0xcc, 0x31, 0xb6, 0x33, 0x2d, 0xfb, 0x1b, 0xbc, 0xf2, 0x63, 0x51, 0x6c, 0x27,
	0x65, 0x42, 0xdd, 0x53, 0x7c, 0xee, 0x39, 0xf7, 0xd8, 0xe7, 0xda, 0x81, 0xd7, 0x5a, 0x15, 0xa7,
	0x5c, 0x18, 0x54, 0x1b, 0x56, 0xa0, 0x3e, 0x55, 0xb2, 0x10, 0x75, 0x89, 0xfd, 0x77, 0x25, 0x55,
	0x6d, 0x6a, 0x12, 0x79, 0xb8, 0xf8, 0x1d, 0xc2, 0x41, 0x26, 0x8b, 0xef, 0x75, 0x89, 0x19, 0xfe,
	0x6a, 0x50, 0x1b, 0x72, 0x0c, 0x11, 0x93, 0x3c, 0xff, 0x89, 0x2d, 0x0d, 0xd2, 0x60, 0x19, 0x67,
	0x53, 0x26, 0xf9, 0x39, 0xb6, 0xe4, 0x08, 0xc6, 0x0d, 0x2f, 0xe9, 0xc8, 0x16, 0xbb, 0x25, 0x49,
	0x60, 0x56, 0xf1, 0x02, 0x45, 0x81, 0x9a, 0x8e, 0xd3, 0x60, 0x19, 0x66, 0x03, 0x26, 0x6f, 0xe0,
	0x40, 0x1b, 0xa6, 0x4c, 0x3e, 0x28, 0x26, 0xb6, 0x71, 0x6e, 0xab, 0x17, 0xbd, 0xec, 0x04, 0xe6,
	0xda, 0xd4, 0x72, 0xab, 0x0a, 0xad, 0x6a, 0xbf, 0x2b, 0x0e, 0x22, 0x0a, 0xd1, 0x2d, 0x2a, 0xcd,
	0x6b, 0x41, 0xa7, 0x96, 0xee, 0x21, 0xf9, 0x0a, 0x71, 0xc5, 0xaf, 0x14, 0x53, 0x1c, 0x35, 0x8d,
	0xd2, 0x60, 0xb9, 0xb7, 0x7e, 0xb9, 0xea, 0xb3, 0x3e, 0x0c, 0xb6, 0xba, 0xb0, 0xc2, 0x36, 0xdb,
	0x76, 0x90, 0xf7, 0x30, 0xa9, 0x98, 0xb8, 0xa6, 0xb3, 0x74, 0xbc, 0xdc, 0x5b, 0xbf, 0xda, 0xd9,
	0xc9, 0xc4, 0xf5, 0x37, 0x61, 0x54, 0x9b, 0x59, 0x39, 0x39, 0x87, 0xa3, 0xc1, 0x23, 0xdf, 0x70,
	0xac, 0x4a, 0x4d, 0x63, 0x6b, 0x91, 0x3e, 0xb2, 0xf9, 0x59, 0x27, 0xcc, 0x0e, 0x87, 0x4e, 0x8b,
	0x75, 0xf2, 0x09, 0x22, 0x7f, 0x32, 0xf2, 0x14, 0x42, 0x5e, 0xa2, 0x30, 0x7e, 0xf0, 0x0e, 0xfc,
	0x9b, 0x7e, 0xf4, 0x20, 0x7d, 0xf2, 0x27, 0x80, 0x59, 0x6f, 0x4c, 0x5e, 0x00, 0x98, 0x56, 0xa2,
	0x3b, 0x8f, 0x77, 0x88, 0xbb, 0x8a, 0xa3, 0x9f, 0xc3, 0xec, 0x86, 0xdd, 0xe5, 0x9a, 0xdf, 0xa3,
	0xb5, 0x09, 0xb3, 0xe8, 0x86, 0xdd, 0x5d, 0xf2, 0x7b, 0xb4, 0x14, 0x17, 0x8e, 0x1a, 0x7b, 0x8a,
	0x0b, 0x4b, 0x9d, 0xc0, 0xbc, 0xc4, 0x0d, 0x6b, 0x2a, 0x93, 0xdf, 0xb2, 0xaa, 0x41, 0x7f, 0x89,
	0xfb, 0xbe, 0xf8, 0xa3, 0xab, 0x91, 0x67, 0x30, 0x95, 0xcc, 0xa0, 0x12, 0xfe, 0xf2, 0x3c, 0x4a,
	0x3e, 0x40, 0x3c, 0x4c, 0xae, 0x7b, 0x3d, 0xdb, 0x27, 0xd5, 0x2d, 0xbb, 0xb4, 0xce, 0xd3, 0xa5,
	0x72, 0xe0, 0xf3, 0xe8, 0x63, 0xb0, 0x78, 0x0b, 0x87, 0xc3, 0xf8, 0xb4, 0xac, 0x85, 0xb6, 0x7b,
	0x28, 0xd4, 0x4d, 0xd5, 0xcf, 0xc6, 0xa3, 0xf5, 0x19, 0x44, 0x5e, 0x4a, 0xbe, 0xc0, 0xe4, 0xb2,
	0x15, 0x05, 0x39, 0xde, 0x71, 0x07, 0x09, 0xfd, 0x9f, 0x70, 0xee, 0x8b, 0x27, 0x57, 0x53, 0xfb,
	0x63, 0xbc, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x5e, 0x60, 0x3c, 0x40, 0x03, 0x00, 0x00,
}
